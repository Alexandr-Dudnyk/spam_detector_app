import streamlit as st
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ BERT (–±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–∞, –ø—ñ–¥—Ç—Ä–∏–º—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—É)
@st.cache_resource
def load_model():
    model_name = "cointegrated/rubert-tiny-toxicity"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name)
    return tokenizer, model

tokenizer, model = load_model()

# –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="BERT Spam/Toxic Detector", page_icon="ü§ñ")
st.title("ü§ñ –í–∏—è–≤–ª–µ–Ω–Ω—è —Å–ø–∞–º—É/—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—ñ (BERT, —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞)")
st.markdown("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é BERT-–º–æ–¥–µ–ª—ñ.")

user_input = st.text_area("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", height=150)

def classify(text):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True)
    with torch.no_grad():
        outputs = model(**inputs)
    scores = torch.sigmoid(outputs.logits).squeeze().numpy()
    labels = model.config.id2label
    return {labels[i]: float(scores[i]) for i in range(len(scores))}

if user_input:
    results = classify(user_input)
    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:")
    for label, score in results.items():
        st.write(f"**{label}**: {score:.2f}")
        st.progress(score)

    if results.get("spam", 0) > 0.5 or results.get("toxic", 0) > 0.5 or results.get("obscene", 0) > 0.5:
        st.error("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ —Å–ø–∞–º–æ–º –∞–±–æ —Ç–æ–∫—Å–∏—á–Ω–∏–º.")
    else:
        st.success("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥–∞—î –±–µ–∑–ø–µ—á–Ω–∏–º.")
